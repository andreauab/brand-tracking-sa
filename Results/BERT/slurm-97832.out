cpu-bind=MASK - aoclsd, task  0  0 [23670]: mask 0xc00c0 set
2023-06-10 00:55:26.191390: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: SSE4.1 SSE4.2, in other operations, rebuild TensorFlow with the appropriate compiler flags.
-----------------------------------------------------------------------
Hello World
-----------------------------------------------------------------------
GPU IS AVAILABLE True
(1637008, 2)
(156682, 2)
(1793690, 2)
Value counts in column 'label':
 0    804413
1    792878
2    167002
Name: sentiment, dtype: int64
Max length:  116
Mean length:  19.78894038575225
LENGTH:  128
BATCH_SIZE:  16
EPOCHS:  3
DROPOUT_PROB:  0.5
LR:  2e-05
(1587863, 2) (88215, 2) (88215, 2)
Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertModel: ['cls.predictions.transform.LayerNorm.bias', 'cls.predictions.transform.dense.bias', 'cls.seq_relationship.weight', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.decoder.weight', 'cls.predictions.bias', 'cls.seq_relationship.bias']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
torch.Size([16, 128]) torch.Size([16, 128]) torch.Size([16])
Created w/ success
Epoch 1/3
------------------------------------------------------------------------------------------------------------------------------------------------------
Train loss: 0.4637724502795052, Train accuracy: 0.8170434099163466, Validation loss: 0.4106749220699542, Validation accuracy: 0.8436773791305334
Epoch 2/3
------------------------------------------------------------------------------------------------------------------------------------------------------
Train loss: 0.35612304866329625, Train accuracy: 0.8643604643473649, Validation loss: 0.38235765776137887, Validation accuracy: 0.8542878195318256
Epoch 3/3
------------------------------------------------------------------------------------------------------------------------------------------------------
Train loss: 0.2709260045259839, Train accuracy: 0.9010701804878632, Validation loss: 0.4181556513973491, Validation accuracy: 0.8557841636909823
------------------------------------------------------------------------------------------------------------------------------------------------------
Best validation accuracy: 0.8557841636909823
------------------------------------------------------------------------------------------------------------------------------------------------------
All history 
 defaultdict(<class 'list'>, {'train_acc': [0.8170434099163466, 0.8643604643473649, 0.9010701804878632], 'train_loss': [0.4637724502795052, 0.35612304866329625, 0.2709260045259839], 'val_acc': [0.8436773791305334, 0.8542878195318256, 0.8557841636909823], 'val_loss': [0.4106749220699542, 0.38235765776137887, 0.4181556513973491]})
Test accuracy 0.8552173666609987
CONFUSION MATRIX 

              precision    recall  f1-score   support

    positive       0.86      0.85      0.85     40173
    negative       0.86      0.86      0.86     39585
     neutral       0.84      0.83      0.84      8457

    accuracy                           0.86     88215
   macro avg       0.85      0.85      0.85     88215
weighted avg       0.86      0.86      0.86     88215

ROC CURVE 

{'fpr': {0: array([0.        , 0.        , 0.        , ..., 0.97069231, 0.97069231,
       1.        ]), 1: array([0.        , 0.        , 0.        , ..., 0.96138186, 0.96138186,
       1.        ]), 2: array([0.        , 0.        , 0.        , ..., 0.93663332, 0.93665839,
       1.        ]), 'micro': array([0.        , 0.        , 0.        , ..., 0.95934365, 0.95935498,
       1.        ])}, 'tpr': {0: array([0.00000000e+00, 2.48923406e-05, 2.98708088e-04, ...,
       9.99975108e-01, 1.00000000e+00, 1.00000000e+00]), 1: array([0.00000000e+00, 2.52620942e-05, 4.04193508e-04, ...,
       9.99974738e-01, 1.00000000e+00, 1.00000000e+00]), 2: array([0.00000000e+00, 1.18245241e-04, 5.91226203e-04, ...,
       1.00000000e+00, 1.00000000e+00, 1.00000000e+00]), 'micro': array([0.00000000e+00, 1.13359406e-05, 5.66797030e-05, ...,
       1.00000000e+00, 1.00000000e+00, 1.00000000e+00])}, 'roc_auc': {0: 0.9403838271048425, 1: 0.9452704401212133, 2: 0.979275030154108, 'micro': 0.9621733886246839}}
PR CURVE 

{'precision': {0: array([0.45539874, 0.4554039 , 0.45540907, ..., 1.        , 1.        ,
       1.        ]), 1: array([0.44873321, 0.4487383 , 0.44874338, ..., 1.        , 1.        ,
       1.        ]), 2: array([0.09586805, 0.09586914, 0.09587022, ..., 1.        , 1.        ,
       1.        ])}, 'recall': {0: array([1.00000000e+00, 1.00000000e+00, 1.00000000e+00, ...,
       4.97846813e-05, 2.48923406e-05, 0.00000000e+00]), 1: array([1.00000000e+00, 1.00000000e+00, 1.00000000e+00, ...,
       5.05241885e-05, 2.52620942e-05, 0.00000000e+00]), 2: array([1.00000000e+00, 1.00000000e+00, 1.00000000e+00, ...,
       2.36490481e-04, 1.18245241e-04, 0.00000000e+00])}, 'average_precision': {0: 0.9315355551562536, 1: 0.9331855022094402, 2: 0.9049339127942237}}
---------------------------------- EXAMPLE --------------------------------------
[1.3679302e-03 9.9835360e-01 2.7855215e-04]
positive % : 0.0014, negative % : 0.9984, neutral % : 0.0003
Sentiment: negative
